/**
 * @Company:
 *  PARMIS-SMARTHOME
 * 
 * @Start_Date:
 *  18/08/1400
 *  
 * @END_Date:    
 *  17/09/1400
 *  
 * @File_Name:
 *  Coffee_Grinder_Main.c
 * 
 * @Version:
 *  v.3.0.3
 * 
 * @Summary:
 *  
 * 
 * @Description:    
 *  FCN                         : Function
 *  MEM                         : Memory-touch
 *  INC                         : Increase
 *  COM                         : Common pin of 7-segment
 *  sss                         : Start/Stop/Set
 *  CMD                         : Command
 * 
 * @Author:
 *  Eng.Hamid.Manouchehri
 */

/*************************************************
 ******************< Main MCU >*******************
 *************************************************/

#include "mcc_generated_files/mcc.h"
#include "sound/sound_unit.h"

//******************************************************************************< ENUMERATOR >

enum {
    TX_7SEG_ON = 11,
    TX_7SEG_OFF = 12,
    TX_MEM_1 = 21,
    TX_MEM_2 = 22,
    TX_MEM_3 = 23,
    TX_MEM_4 = 24,
    TX_7SEG_MANUAL = 30,
    TX_7SEG_SET_ZERO = 31,
    TX_7SEG_SHOW_TIME = 32,
    TX_7SEG_STORE_TIME = 33,
    TX_7SEG_STORE_INITIAL_VALUE = 35,
    TX_SELECT_DIGIT = 41,
    TX_END_SELECT_DIGIT = 42,
    TX_INCREASE_DIGIT = 43,
    COUNT_DOWN_FINISHED = 50,
    TX_START_DECREASE = 62,
    TX_STOP_DECREASE = 63,
    TX_START_INCREASE = 64,
    TX_STOP_INCREASE_SET_MANUAL = 65,
    TX_7SEG_SHOW_MASS = 66,
    TX_7SEG_STORE_MASS = 67,
    RX_7SEG_REACHED_999 = 68,
    TX_7SEG_STORE_MEM_1 = 111,
    TX_7SEG_SET_MEM_1 = 112,
    TX_7SEG_STORE_MEM_2 = 121,
    TX_7SEG_SET_MEM_2 = 122,
    TX_7SEG_STORE_MEM_3 = 131,
    TX_7SEG_SET_MEM_3 = 132,
    TX_7SEG_STORE_MEM_4 = 141,
    TX_7SEG_SET_MEM_4 = 142
};

typedef enum {
    start_e = 1,
    stop_e,
    set_e
} sss_status_e;

sss_status_e g_sss_status;

typedef enum {
    automatic_e = 1,
    manual_e,
    timer_e
} mode_status_e;

mode_status_e g_mode_status;

typedef enum {
    yekan_e = 1,
    dahegan_e,
    sadegan_e
} digit_status_e;

digit_status_e g_digit_status;

//******************************************************************************< MACRO >

/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 *****************************< ADJUSTABLE SETTING >*****************************
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/

#define ENABLE_SOUND                         true
#define TMR0_LONGPRESS_LEARN_DURATION        80 // 80 * 16.384(ms) = 3(s)

/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/

#define ENABLE                               true
#define DISABLE                              false

//******************************************************************************< STRUCTURE >

typedef struct {
    unsigned PushButton : 1;
    unsigned up : 1;
    unsigned next : 1;
    unsigned memories : 1;
} touch_status_t;

touch_status_t g_touch_status;

typedef struct {
    uint8_t yekan;
    uint8_t dahegan;
    uint8_t sadegan;
} timer_calc_t;

timer_calc_t g_time_calc;

typedef struct {
    uint8_t yekan;
    uint8_t dahegan;
    uint8_t sadegan;
} mass_calc_t;

mass_calc_t g_mass_calc;

typedef struct {
    unsigned off_led : 1;
    unsigned touch_leds : 1;
    unsigned touches : 1;
    unsigned motor : 1;
    unsigned _7segment : 1;
    unsigned PushButton : 1;
} status_t;

status_t g_status;

typedef struct {
    unsigned automatic : 1;
    unsigned manual : 1;
    unsigned timer : 1;
} power_event_t;

power_event_t g_power_event = {false, false, false};

//******************************************************************************< FUNCTION DECLARATION >
inline void init_panel(void);
inline void EEPROM_init(void);
inline void tmr0_long_press_duration(void);
inline void tmr1_motor_on_duration(void);
inline void FCN_NEXT(void);
inline void FCN_UP(void);
inline void FCN_POWER(void);
inline void Toggle_Touch_LEDs(void);
inline void Toggle_OFFLED(void);
inline void Toggle_Touches(void);
inline void Toggle_7seg(void);
inline void Toggle_PushButton(void);
inline void Motor_ON(uint24_t);
inline void TX_Command(uint8_t);
inline uint8_t RX_Command(void);
inline void Main_Routine(void);
inline void Manual_Mode(void);
inline void Timer_Mode(void);
inline void Automatic_Mode(void);
inline void Reset_Digit_Value(void);
inline void set_digit_counters(uint16_t, uint16_t);

//******************************************************************************< GLOBAL VARIABLE >

__eeprom uint16_t ge_memory_mass[4];
__eeprom uint16_t ge_time_ms;

uint16_t g_memory_mass[4];
uint16_t g_motor_on_duration_ms;
uint16_t g_7seg_change_digit_duration;

uint16_t g_tmr0_longpress_duration_counter;

uint16_t g_mass = 0;
uint16_t g_time_ms = 100; // Grinding time per 1 Gram in Millisecond

uint16_t g_mass_backup;
uint16_t g_time_ms_backup;

uint16_t g_tmr1_motor_counter;

bool gb_motor_timer_off;

//******************************************************************************< MAIN >

void main(void) {

    SYSTEM_Initialize();
    EEPROM_init();
    init_panel();

    INTERRUPT_GlobalInterruptEnable();
    INTERRUPT_PeripheralInterruptEnable();

    TMR0_SetInterruptHandler(tmr0_long_press_duration); // Period: 16.384(ms)
    TMR1_SetInterruptHandler(tmr1_motor_on_duration); // Period: 10(ms)


    while (1) {

        Main_Routine();

    }
}

//******************************************************************************< FUNCTION DEFINITION >

/*******************************************************************************
 *******************************************************************************
                            < INITIALIZATION ROUTINES >
 *******************************************************************************
 ******************************************************************************/
inline void init_panel(void) {

    g_mass = 0;

    g_status.off_led = false; // Initially OFF
    Toggle_OFFLED();

    g_status.touch_leds = false; // Initially OFF
    Toggle_Touch_LEDs();

    g_status.touches = DISABLE;

    g_status._7segment = DISABLE;
    Toggle_7seg();

    g_status.PushButton = DISABLE;

    TMR1_StopTimer();
    MOTOR_SetLow(); // Ensure motor is off

    g_touch_status.next = ENABLE;
    g_touch_status.up = ENABLE;
    g_touch_status.memories = ENABLE;

    Reset_Digit_Value(); // Reset time and mass digit counters to initial values

    g_sss_status = set_e;
    g_mode_status = automatic_e;
    g_digit_status = yekan_e;
}

inline void EEPROM_init(void) {

    for (register uint8_t i = 0; i < 4; i++) {

        g_memory_mass[i] = ge_memory_mass[i];
    }

    g_time_ms = ge_time_ms;
}

/*******************************************************************************
 *******************************************************************************
                                < NEXT TOUCH >
 *******************************************************************************
 ******************************************************************************/
inline void FCN_NEXT(void) { //                                                 

    TX_Command(TX_SELECT_DIGIT);

    switch (g_digit_status) {

        case yekan_e:
            g_digit_status = dahegan_e;
            break;

        case dahegan_e:
            g_digit_status = sadegan_e;
            break;

        case sadegan_e:
            g_digit_status = yekan_e;
            break;

        default:
            // Do nothing
            break;
    } // End of switch
}

/*******************************************************************************
 *******************************************************************************
                                 < UP TOUCH >
 *******************************************************************************
 ******************************************************************************/
inline void FCN_UP(void) { //                                                   

    TX_Command(TX_INCREASE_DIGIT);

    switch (g_mode_status) {

        case automatic_e:

            if (yekan_e == g_digit_status) {

                g_mass_calc.yekan++;
                if (10 == g_mass_calc.yekan) {
                    g_mass_calc.yekan = 0; // Reset digit
                }
            } else if (dahegan_e == g_digit_status) {

                g_mass_calc.dahegan++;
                if (10 == g_mass_calc.dahegan) {
                    g_mass_calc.dahegan = 0; // Reset digit
                }
            } else if (sadegan_e == g_digit_status) {

                g_mass_calc.sadegan++;
                if (10 == g_mass_calc.sadegan) {
                    g_mass_calc.sadegan = 0; // Reset digit
                }
            }

            break;

        case timer_e:

            if (yekan_e == g_digit_status) {

                g_time_calc.yekan++;
                if (10 == g_time_calc.yekan) {
                    g_time_calc.yekan = 0;
                }
            } else if (dahegan_e == g_digit_status) {

                g_time_calc.dahegan++;
                if (10 == g_time_calc.dahegan) {
                    g_time_calc.dahegan = 0;
                }
            } else if (sadegan_e == g_digit_status) {

                g_time_calc.sadegan++;
                if (10 == g_time_calc.sadegan) {
                    g_time_calc.sadegan = 0;
                }
            }

            break;

        default:
            // Do nothing
            break;
    } // End of switch()
}

/*******************************************************************************
 *******************************************************************************
                                < POWER TOUCH >
 *******************************************************************************
 ******************************************************************************/
inline void FCN_POWER(void) { //                                                

    Toggle_Touch_LEDs();
    Toggle_OFFLED();
    Toggle_Touches();
    Toggle_7seg();
    Toggle_PushButton();
    EEPROM_init();
    TMR1_StopTimer();
    MOTOR_SetLow(); // Ensure motor is off anyway

    SET_SOUND_MODE(learn_rf_code_is_start);
}

/*******************************************************************************
 *******************************************************************************
                                < TOGGLE ROUTINES >
 *******************************************************************************
 ******************************************************************************/
inline void Toggle_Touch_LEDs(void) {

    if (g_status.touch_leds) {

        TOUCH_LEDs_SetHigh();
    } else {

        TOUCH_LEDs_SetLow();
    }

    g_status.touch_leds ^= 1; // Toggle status
}

inline void Toggle_OFFLED(void) {

    if (g_status.off_led) {

        OFF_LED_SetHigh();
    } else {

        OFF_LED_SetLow();
    }

    g_status.off_led ^= 1; // Toggle status
}

inline void Toggle_Touches(void) {

    g_status.touches ^= 1; // Toggle status
}

inline void Toggle_7seg(void) {

    if (g_status._7segment) {

        TX_Command(TX_7SEG_ON);

    } else {

        TX_Command(TX_7SEG_OFF);
    }

    g_status._7segment ^= 1; // Toggle status
}

inline void Toggle_PushButton(void) {

    g_status.PushButton ^= 1;
}

/*******************************************************************************
 *******************************************************************************
                                  < MOTOR ON >
 *******************************************************************************
 ******************************************************************************/
inline void Motor_ON(uint24_t motor_on_time_ms) { //                            

    g_motor_on_duration_ms = (uint16_t) (motor_on_time_ms / 10); // 'tmr1' period = 10(ms)

    g_tmr1_motor_counter = 0;
    MOTOR_SetHigh();
    TMR1_StartTimer(); // Start timer for motor     
}

/*******************************************************************************
 *******************************************************************************
                                  < TRANSMIT >
 *******************************************************************************
 ******************************************************************************/
inline void TX_Command(uint8_t txData) { //                                     

    if (EUSART_is_tx_ready()) { // Second send data value:

        EUSART_Write(txData);
    }
}

/*******************************************************************************
 *******************************************************************************
                                  < RECEIVE >
 *******************************************************************************
 ******************************************************************************/
inline uint8_t RX_Command(void) { //                                            

    uint8_t buffer;

    if (EUSART_is_rx_ready()) {

        buffer = EUSART_Read();
        return buffer;
    }
}

/*******************************************************************************
 *******************************************************************************
                           < TIMER INTERRUPT HANDLERS >
 *******************************************************************************
 ******************************************************************************/
inline void tmr0_long_press_duration(void) {

    g_tmr0_longpress_duration_counter++;
}

inline void tmr1_motor_on_duration(void) {

    g_tmr1_motor_counter++;

    if (g_motor_on_duration_ms == g_tmr1_motor_counter) {

        g_sss_status = start_e;
        TMR1_StopTimer();
        MOTOR_SetLow();
        g_tmr1_motor_counter = 0;
        gb_motor_timer_off = true;
    }
}

/*******************************************************************************
 *******************************************************************************
                                < MAIN ROUTINE >
 *******************************************************************************
 ******************************************************************************/
inline void Main_Routine(void) {

    if (true == MTOUCH_Service_Mainloop()) {

        if (true == MTOUCH_Button_isPressed(T_6)) { // Power

            while (true == MTOUCH_Button_isPressed(T_6)) {
                MTOUCH_Service_Mainloop();
            }

            FCN_POWER();

            Automatic_Mode();

            while (true == MTOUCH_Button_isPressed(T_6)) {
                MTOUCH_Service_Mainloop();
            }
        } // End of Power
    }
}

/*******************************************************************************
 *******************************************************************************
                               < MANUAL MODE >
 *******************************************************************************
 ******************************************************************************/
inline void Manual_Mode(void) {

    uint8_t received_command;
    bool b_mode_touched = false;
    bool b_power_touched = false;
    bool Flag = false;
    bool Flag_sound = true;

    TMR1_StopTimer();
    TX_Command(TX_7SEG_ON);
    TX_Command(TX_7SEG_MANUAL);

    while (1) {

        if (true == MTOUCH_Service_Mainloop()) {

            if (true == MTOUCH_Button_isPressed(T_7)) { // Mode

                b_mode_touched = true;

                SET_SOUND_MODE(learn_rf_code_is_start);
                while (true == MTOUCH_Button_isPressed(T_7)) {
                    MTOUCH_Service_Mainloop();
                }
                break; // Get out of while(1)
            } // End of Mode


            if (true == MTOUCH_Button_isPressed(T_6)) { // Power

                b_power_touched = true;

                while (true == MTOUCH_Button_isPressed(T_6)) {
                    MTOUCH_Service_Mainloop();
                }
                break; //Get out of while(1)
            } // End of Power


            if (true == MTOUCH_Button_isPressed(T_8)) { // Start / Stop

                if (MOTOR_GetValue()) {

                    TX_Command(TX_STOP_INCREASE_SET_MANUAL);
                    MOTOR_SetLow();
                } else {

                    TX_Command(TX_START_INCREASE);
                    MOTOR_SetHigh();
                }

                SET_SOUND_MODE(learn_rf_code_is_start);
                while (true == MTOUCH_Button_isPressed(T_8)) {
                    MTOUCH_Service_Mainloop();
                }
            }// End of Start / Stop

            Flag_sound = true;
            while (!PUSH_BUTTON_GetValue()) { // PushButton

                Flag = true;

                MOTOR_SetHigh();
                if (Flag_sound) {

                    TX_Command(TX_START_INCREASE);
                    SET_SOUND_MODE(learn_rf_code_is_start);
                    Flag_sound = false;
                }
            } // End of while()
            if (Flag) {

                TX_Command(TX_STOP_INCREASE_SET_MANUAL);
                MOTOR_SetLow();
                Flag = false;
            }
        } // End of if() 

        received_command = RX_Command();

        if (RX_7SEG_REACHED_999 == received_command) {

            MOTOR_SetLow();
            SET_SOUND_MODE(learn_rf_code_is_start);
        }
    } // End of while(1)


    if (true == b_mode_touched) {

        MOTOR_SetLow();
        g_mode_status = automatic_e;

        TX_Command(TX_STOP_INCREASE_SET_MANUAL);
        TX_Command(TX_7SEG_SHOW_MASS);
    }


    if (true == b_power_touched) {

        g_power_event.manual = true;
        TX_Command(TX_STOP_INCREASE_SET_MANUAL);
        TX_Command(TX_7SEG_OFF);
    }
}

/*******************************************************************************
 *******************************************************************************
                                < TIMER MODE >
 *******************************************************************************
 ******************************************************************************/
inline void Timer_Mode(void) {

    uint16_t buffer;
    bool b_mode_touched = false;
    bool b_power_touched = false;

    g_digit_status = sadegan_e;
    g_mode_status = timer_e;

    //    TX_Command(TX_7SEG_ON);
    //    TX_Command(TX_7SEG_SHOW_TIME);

    g_time_calc.sadegan = g_time_ms / 100;
    buffer = g_time_ms % 100;
    g_time_calc.dahegan = buffer / 10;
    g_time_calc.yekan = buffer % 10;

    while (1) {

        if (true == MTOUCH_Service_Mainloop()) {

            if (true == MTOUCH_Button_isPressed(T_7)) { // Mode

                b_mode_touched = true;

                SET_SOUND_MODE(learn_rf_code_is_start);
                while (true == MTOUCH_Button_isPressed(T_7)) {
                    MTOUCH_Service_Mainloop();
                }
                break; // Get out of while(1)
            } // End of Mode


            if (true == MTOUCH_Button_isPressed(T_6)) { // Power

                b_power_touched = true;

                while (true == MTOUCH_Button_isPressed(T_6)) {
                    MTOUCH_Service_Mainloop();
                }
                break; //Get out of while(1)
            } // End of Power


            if (true == MTOUCH_Button_isPressed(T_8)) { // Set

                g_digit_status = sadegan_e;

                g_time_ms = (g_time_calc.yekan +
                        (10 * (uint16_t) g_time_calc.dahegan) +
                        (100 * (uint16_t) g_time_calc.sadegan));

                TX_Command(TX_7SEG_STORE_TIME);
                ge_time_ms = g_time_ms;
                TX_Command(TX_END_SELECT_DIGIT);

                SET_SOUND_MODE(learn_rf_code_is_start);
                while (true == MTOUCH_Button_isPressed(T_8)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Set


            if (true == MTOUCH_Button_isPressed(T_9)) { // Up

                g_mode_status = timer_e;
                g_sss_status = set_e;
                FCN_UP();

                while (true == MTOUCH_Button_isPressed(T_9)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Up


            if (true == MTOUCH_Button_isPressed(T_5)) { // Next

                g_sss_status = set_e;
                FCN_NEXT();

                while (true == MTOUCH_Button_isPressed(T_5)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Next
        } // End of if()              
    } // End of while(1)


    if (true == b_mode_touched) {

        g_mode_status = automatic_e;
        g_sss_status = start_e;

        TX_Command(TX_END_SELECT_DIGIT);
        TX_Command(TX_7SEG_SHOW_MASS);
    }


    if (true == b_power_touched) {

        g_power_event.timer = true;
        TX_Command(TX_7SEG_OFF);
    }
}

/*******************************************************************************
 *******************************************************************************
                               < AUTOMATIC MODE >
 *******************************************************************************
 ******************************************************************************/
inline void Automatic_Mode(void) {

    MTOUCH_Service_Mainloop();

    uint24_t motor_on_time_ms;
    uint16_t buffer;

    g_digit_status = sadegan_e;

    if (0 != g_mass) {

        g_sss_status = start_e;
    } else {

        g_sss_status = set_e;
    }

    TX_Command(TX_7SEG_ON);
    TX_Command(TX_7SEG_SHOW_MASS);

    g_mass_calc.sadegan = g_mass / 100;
    buffer = g_mass % 100;
    g_mass_calc.dahegan = buffer / 10;
    g_mass_calc.yekan = buffer % 10;

    while (1) {

        if (true == MTOUCH_Service_Mainloop()) {

            if (true == MTOUCH_Button_isPressed(T_7)) { // Mode

                TX_Command(TX_END_SELECT_DIGIT);
                TX_Command(TX_STOP_DECREASE);
                TMR1_StopTimer();
                MOTOR_SetLow();

                g_tmr0_longpress_duration_counter = 0;

                while ((true == MTOUCH_Button_isPressed(T_7)) &&
                        (g_tmr0_longpress_duration_counter < TMR0_LONGPRESS_LEARN_DURATION)) {
                    MTOUCH_Service_Mainloop();
                }

                if (true == MTOUCH_Button_isPressed(T_7)) { // long_press 

                    SET_SOUND_MODE(dimmer_is_min);
                    TX_Command(TX_7SEG_ON);
                    TX_Command(TX_7SEG_SHOW_TIME);

                    while (true == MTOUCH_Button_isPressed(T_7)) {
                        MTOUCH_Service_Mainloop();
                    }

                    Timer_Mode(); // Timer mode

                    if (g_power_event.timer) {

                        g_power_event.timer = false;
                        g_power_event.automatic = true;
                        break; // Get out of 'Automatic_Mode' while(1)
                    }

                    g_digit_status = sadegan_e;
                } else { // short_press 

                    while (true == MTOUCH_Button_isPressed(T_7)) {
                        MTOUCH_Service_Mainloop();
                    }
                    SET_SOUND_MODE(learn_rf_code_is_start);

                    Manual_Mode(); // Manual mode

                    if (g_power_event.manual) {

                        g_power_event.manual = false;
                        g_power_event.automatic = true;
                        break; // Get out of 'Automatic_Mode' while(1)
                    }

                    g_digit_status = sadegan_e;
                } // End of else

                g_sss_status = start_e;
            } // End of Mode


            if (true == MTOUCH_Button_isPressed(T_6)) { // Power

                g_power_event.automatic = true;

                while (true == MTOUCH_Button_isPressed(T_6)) {
                    MTOUCH_Service_Mainloop();
                }
                break; //Get out of while(1)
            } // End of Power


            if (true == MTOUCH_Button_isPressed(T_8)) { // Set / Start / Stop

                switch (g_sss_status) {

                    case set_e:

                        g_sss_status = start_e;
                        g_digit_status = sadegan_e;

                        g_mass = (g_mass_calc.yekan +
                                (10 * (uint16_t) g_mass_calc.dahegan) +
                                (100 * (uint16_t) g_mass_calc.sadegan));

                        g_time_ms = (g_time_calc.yekan +
                                (10 * (uint16_t) g_time_calc.dahegan) +
                                (100 * (uint16_t) g_time_calc.sadegan));

                        TX_Command(TX_7SEG_STORE_MASS);
                        TX_Command(TX_END_SELECT_DIGIT);
                        SET_SOUND_MODE(learn_rf_code_is_start);
                        break;

                    case start_e:

                        g_digit_status = sadegan_e;

                        motor_on_time_ms = (uint24_t) g_mass * g_time_ms;

                        if (0 != motor_on_time_ms) {

                            TX_Command(TX_7SEG_STORE_INITIAL_VALUE);
                            TX_Command(TX_START_DECREASE);
                            g_sss_status = stop_e;
                            Motor_ON(motor_on_time_ms);
                            SET_SOUND_MODE(learn_rf_code_is_start);
                        } else {

                            g_sss_status = set_e;
                            SET_SOUND_MODE(memory_is_full);
                        }

                        break;

                    case stop_e:

                        g_sss_status = start_e;
                        TMR1_StopTimer();
                        MOTOR_SetLow();
                        g_tmr1_motor_counter = 0;
                        TX_Command(TX_STOP_DECREASE);
                        TX_Command(TX_7SEG_SHOW_MASS);

                        SET_SOUND_MODE(learn_rf_code_is_start);
                        break;

                    default:
                        // Do nothing
                        break;
                } // End of switch()

                while (true == MTOUCH_Button_isPressed(T_8)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Set



            if (true == MTOUCH_Button_isPressed(T_9)) { // Up

                g_mode_status = automatic_e;
                g_sss_status = set_e;
                FCN_UP();

                while (true == MTOUCH_Button_isPressed(T_9)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Up


            if (true == MTOUCH_Button_isPressed(T_5)) { // Next

                g_sss_status = set_e;
                FCN_NEXT();

                while (true == MTOUCH_Button_isPressed(T_5)) {
                    MTOUCH_Service_Mainloop();
                }
            } // End of Next


            if (true == MTOUCH_Button_isPressed(T_3)) { // Mem_1

                TX_Command(TX_END_SELECT_DIGIT);
                TX_Command(TX_STOP_DECREASE);
                TMR1_StopTimer();
                MOTOR_SetLow();

                g_tmr0_longpress_duration_counter = 0;

                while ((true == MTOUCH_Button_isPressed(T_3)) &&
                        (g_tmr0_longpress_duration_counter < TMR0_LONGPRESS_LEARN_DURATION)) {
                    MTOUCH_Service_Mainloop();
                }

                if (true == MTOUCH_Button_isPressed(T_3)) { // long_press 

                    SET_SOUND_MODE(dimmer_is_min);

                    while (true == MTOUCH_Button_isPressed(T_3)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_STORE_MEM_1); // Store mem_1 '7seg'
                    TX_Command(TX_7SEG_SET_MEM_1); // Set mem_1 '7seg'

                    ge_memory_mass[0] = g_mass;
                    g_memory_mass[0] = g_mass;

                    ge_time_ms = g_time_ms;

                } else { // short_press 

                    SET_SOUND_MODE(learn_rf_code_is_start);

                    while (true == MTOUCH_Button_isPressed(T_3)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_SET_MEM_1); // Set mem_1 '7seg' 

                    g_mass = g_memory_mass[0];
                    g_time_ms = ge_time_ms;

                } // End of else

                TX_Command(TX_7SEG_STORE_MASS);
                set_digit_counters(g_memory_mass[0], g_time_ms);
                g_sss_status = start_e;
            } // End of Mem_1


            if (true == MTOUCH_Button_isPressed(T_1)) { // Mem_2

                TX_Command(TX_END_SELECT_DIGIT);
                TX_Command(TX_STOP_DECREASE);
                TMR1_StopTimer();
                MOTOR_SetLow();

                g_tmr0_longpress_duration_counter = 0;

                while ((true == MTOUCH_Button_isPressed(T_1)) &&
                        (g_tmr0_longpress_duration_counter < TMR0_LONGPRESS_LEARN_DURATION)) {
                    MTOUCH_Service_Mainloop();
                }

                if (true == MTOUCH_Button_isPressed(T_1)) { // long_press 

                    SET_SOUND_MODE(dimmer_is_min);

                    while (true == MTOUCH_Button_isPressed(T_1)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_STORE_MEM_2); // Store mem_2 '7seg'
                    TX_Command(TX_7SEG_SET_MEM_2); // Set mem_2 '7seg'

                    ge_memory_mass[1] = g_mass;
                    g_memory_mass[1] = g_mass;

                    ge_time_ms = g_time_ms;

                } else { // short_press 

                    SET_SOUND_MODE(learn_rf_code_is_start);
                    while (true == MTOUCH_Button_isPressed(T_1)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_SET_MEM_2); // Set mem_2 '7seg'

                    g_mass = g_memory_mass[1];
                    g_time_ms = ge_time_ms;
                } // End of else

                TX_Command(TX_7SEG_STORE_MASS);
                set_digit_counters(g_memory_mass[1], g_time_ms);
                g_sss_status = start_e;
            } // End of Mem_2


            if (true == MTOUCH_Button_isPressed(T_2)) { // Mem_3

                TX_Command(TX_END_SELECT_DIGIT);
                TX_Command(TX_STOP_DECREASE);
                TMR1_StopTimer();
                MOTOR_SetLow();

                g_tmr0_longpress_duration_counter = 0;

                while ((true == MTOUCH_Button_isPressed(T_2)) &&
                        (g_tmr0_longpress_duration_counter < TMR0_LONGPRESS_LEARN_DURATION)) {
                    MTOUCH_Service_Mainloop();
                }

                if (true == MTOUCH_Button_isPressed(T_2)) { // long_press 

                    SET_SOUND_MODE(dimmer_is_min);

                    while (true == MTOUCH_Button_isPressed(T_2)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_STORE_MEM_3); // Store mem_3 '7seg'
                    TX_Command(TX_7SEG_SET_MEM_3); // Set mem_3 '7seg'

                    ge_memory_mass[2] = g_mass;
                    g_memory_mass[2] = g_mass;

                    ge_time_ms = g_time_ms;

                } else { // short_press 

                    SET_SOUND_MODE(learn_rf_code_is_start);

                    while (true == MTOUCH_Button_isPressed(T_2)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_SET_MEM_3); // Set mem_3 '7seg'

                    g_mass = g_memory_mass[2];
                    g_time_ms = ge_time_ms;
                } // End of else

                TX_Command(TX_7SEG_STORE_MASS);
                set_digit_counters(g_memory_mass[2], g_time_ms);
                g_sss_status = start_e;
            } // End of Mem_3


            if (true == MTOUCH_Button_isPressed(T_4)) { // Mem_4

                TX_Command(TX_END_SELECT_DIGIT);
                TX_Command(TX_STOP_DECREASE);
                TMR1_StopTimer();
                MOTOR_SetLow();

                g_tmr0_longpress_duration_counter = 0;

                while ((true == MTOUCH_Button_isPressed(T_4)) &&
                        (g_tmr0_longpress_duration_counter < TMR0_LONGPRESS_LEARN_DURATION)) {
                    MTOUCH_Service_Mainloop();
                }

                if (true == MTOUCH_Button_isPressed(T_4)) { // long_press 

                    SET_SOUND_MODE(dimmer_is_min);

                    while (true == MTOUCH_Button_isPressed(T_4)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_STORE_MEM_4); // Store mem_4 '7seg'
                    TX_Command(TX_7SEG_SET_MEM_4); // Set mem_4 '7seg'

                    ge_memory_mass[3] = g_mass;
                    g_memory_mass[3] = g_mass;

                    ge_time_ms = g_time_ms;

                } else { // short_press 

                    SET_SOUND_MODE(learn_rf_code_is_start);

                    while (true == MTOUCH_Button_isPressed(T_4)) {
                        MTOUCH_Service_Mainloop();
                    }

                    TX_Command(TX_7SEG_SET_MEM_4); // Set mem_4 '7seg'

                    g_mass = g_memory_mass[3];
                    g_time_ms = ge_time_ms;
                } // End of else

                TX_Command(TX_7SEG_STORE_MASS);
                set_digit_counters(g_memory_mass[3], g_time_ms);
                g_sss_status = start_e;
            } // End of Mem_4


            if (gb_motor_timer_off) {

                gb_motor_timer_off = false;
                /* 
                 * 'SET_SOUND_MODE' function cannot be called in interrupt
                 * routine function because it needs interrupts to be enabled
                 * while it disables interrupt handlers.
                 */
                SET_SOUND_MODE(dimmer_is_max);
            }
        } // End of if()              
    } // End of while(1)

    if (g_power_event.automatic) {

        g_power_event.automatic = false;
        TMR1_StopTimer();
        g_tmr1_motor_counter = 0;
        TX_Command(TX_END_SELECT_DIGIT);

        FCN_POWER();
    }
}

inline void Reset_Digit_Value(void) {

    g_mass_calc.yekan = 0;
    g_mass_calc.dahegan = 0;
    g_mass_calc.sadegan = 0;

    g_time_calc.yekan = 0;
    g_time_calc.dahegan = 0;
    g_time_calc.sadegan = 1;
}

inline void set_digit_counters(uint16_t mass, uint16_t time) {

    uint16_t buffer;

    g_mass_calc.sadegan = mass / 100;
    buffer = mass % 100;
    g_mass_calc.dahegan = buffer / 10;
    g_mass_calc.yekan = buffer % 10;

    g_time_calc.sadegan = time / 100;
    buffer = time % 100;
    g_time_calc.dahegan = buffer / 10;
    g_time_calc.yekan = buffer % 10;

}

