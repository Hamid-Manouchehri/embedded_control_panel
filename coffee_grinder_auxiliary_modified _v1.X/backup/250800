/**
 * @Company:
 *  PARMIS-SMARTHOME
 * 
 * @Start_Date:
 *  18/8/1400
 *  
 * @END_Date:    
 *  
 * @File_Name:
 *  coffee_grinder_auxiliary_modified.c
 * 
 * @Version:
 *  v.2
 * 
 * @Summary:
 *  
 * 
 * @Description:    
 *  
 * 
 * @Authors:
 *  Eng.Hamid.Manouchehri and Eng.Ali.Tavakoli
 */

/*************************************************
 ******************< Main MCU >*******************
 *************************************************/

#include "mcc_generated_files/mcc.h"

typedef enum {
    position_yekan = 1,
    position_dahegan = 10,
    position_sadegan = 100
} digit_position_t;

digit_position_t g_digit_num;

typedef struct {
    //Position specifies digit is yekan or dahegan and so
    const digit_position_t position;
    uint8_t value;
    uint8_t seven_segment_maping;
    unsigned show : 1;
} digit_t;

digit_t g_yekan = {position_yekan};
digit_t g_dahegan = {position_dahegan};
digit_t g_sadegan = {position_sadegan};
digit_t *gp_selected_digit = NULL; //No digit is selected at startup.

void init_digit(void);
void select_digit(void);
void end_select_digit(void);
void increase_digit(void);
void decrease_digit(void);
void display_refresh(void);
void blink_digit(void);
uint16_t get_display_value(void);
void set_display_value(uint16_t value);
void TX_Command(uint8_t);
uint8_t RX_Command(void);
void tx_7seg_reach_zero(void);

uint8_t g_7seg_table[10] = {0x3F, 0x06, 0x5B, 0x4F,
    0x66, 0x6D, 0x7D, 0x07,
    0x7F, 0x6F}; // 0-9

void main(void) {

    SYSTEM_Initialize();
    init_digit();

    INTERRUPT_GlobalInterruptEnable();
    INTERRUPT_PeripheralInterruptEnable();

    TMR0_SetInterruptHandler(display_refresh);
    TMR1_SetInterruptHandler(blink_digit);

    g_digit_num = position_sadegan;

//    select_digit();
//    increase_digit();
//    increase_digit();
//    increase_digit();
//    select_digit();
    //    increase_digit();



    while (1) {

        //        tx_7seg_reach_zero();

    }
}

/*********************************************************************
 * Function:        void init_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        Call this function to initialize digits struct. This
 *                      function must be called once at startup.
 *
 * Note:            None
 ********************************************************************/
void
init_digit(void) {

    PIN_COM_1_SetLow();
    PIN_COM_2_SetLow();
    PIN_COM_3_SetLow();

    g_yekan.value = 0;
    g_yekan.seven_segment_maping = g_7seg_table[g_yekan.value];
    g_yekan.show = true;

    g_dahegan.value = 0;
    g_dahegan.seven_segment_maping = g_7seg_table[g_dahegan.value];
    g_dahegan.show = true;

    g_sadegan.value = 0;
    g_sadegan.seven_segment_maping = g_7seg_table[g_sadegan.value];
    g_sadegan.show = true;

}

/*********************************************************************
 * Function:        void select_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        This function select a digit and must be called when the
 *                      event that selects the digits is triggered. If no digit
 *                      is selected already, the yekan digit will be select,
 *                      otherwise the digits are selected In rotation.
 *
 * Note:            
 ********************************************************************/
void
select_digit(void) {

    digit_t* buffer = gp_selected_digit;
    gp_selected_digit = NULL;

    if (NULL == buffer) // If no digit select yet
    {

        gp_selected_digit = &g_yekan;
    } else {

        // Only to ensure that the previous selected digit show.
        buffer->show = true;

        switch (buffer->position) {
            case position_yekan:

                gp_selected_digit = &g_dahegan;
                break;
            case position_dahegan:

                gp_selected_digit = &g_sadegan;
                break;
            case position_sadegan:

                gp_selected_digit = &g_yekan;
                break;
        }
    }

    // If you disable(stop) timer at blink_digit() function, you must re-enable
    //  (start) timer here.
}

/*********************************************************************
 * Function:        void end_select_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        Use this function to exit from digit select mode.
 *
 * Note:            None
 ********************************************************************/
void
end_select_digit(void) {

    digit_t* buffer = gp_selected_digit;
    gp_selected_digit = NULL;
    buffer->show = true;
}

/*********************************************************************
 * Function:        void increase_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        Use this function to increase value of selected digit. This
 *                      function is safe, you don't need to check either a digit
 *                      is selected or no.
 *
 * Note:            None
 ********************************************************************/
void
increase_digit(void) {

    if (NULL != gp_selected_digit) {

        gp_selected_digit->value++;

        if (10 == gp_selected_digit->value) {

            gp_selected_digit->value = 0;
        }

        gp_selected_digit->seven_segment_maping =
                g_7seg_table[gp_selected_digit->value];
    }
}

/*********************************************************************
 * Function:        void decrease_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        Use this function to decrease value of selected digit. This
 *                      function is safe, you don't need to check either a digit
 *                      is selected or no.
 *
 * Note:            None
 ********************************************************************/
void
decrease_digit(void) {

    if (NULL != gp_selected_digit) {

        if (0 == gp_selected_digit->value) {

            gp_selected_digit->value = 9;
        } else {

            gp_selected_digit->value--;
        }

        gp_selected_digit->seven_segment_maping =
                g_7seg_table[gp_selected_digit->value];
    }
}

/*********************************************************************
 * Function:        void display_refresh(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        This function must be called periodically (e.g. from timer 
 *                      interrupt) to refresh the display. You must determine
 *                      call-interval and on_time value by experiment.
 *
 * Note:            You may need to change this function a little because i
 *                      don't access to schematic.
 ********************************************************************/
void
display_refresh(void) {

#define on_time 5

    PIN_COM_1_SetLow();
    PIN_COM_2_SetLow();
    PIN_COM_3_SetLow();

    if (true == g_yekan.show) {

        LATC = g_yekan.seven_segment_maping;
        PIN_COM_1_SetHigh();
    }
    __delay_ms(on_time);
    PIN_COM_1_SetLow();

    if (true == g_dahegan.show) {

        LATC = g_dahegan.seven_segment_maping;
        PIN_COM_2_SetHigh();
    }
    __delay_ms(on_time);
    PIN_COM_2_SetLow();

    if (true == g_sadegan.show) {

        LATC = g_sadegan.seven_segment_maping;
        PIN_COM_3_SetHigh();
    }
    __delay_ms(on_time);
    PIN_COM_3_SetLow();

#undef on_time
}

/*********************************************************************
 * Function:        void blink_digit(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        This function is used to blink the selected digit. This
 *                      function must be called periodically with your desire 
 *                      interval. The interval determines blinking speed.
 *
 * Note:            None
 ********************************************************************/
void
blink_digit(void) {

    if (NULL != gp_selected_digit) {

        gp_selected_digit->show ^= 1;
    }
    //You can disable timer which is associated to digit blink at this point (to
    // reduce MCU overhead) by uncomment 'else' block and call proper function.
    // If you disable timer, you must re-enable it at select_digit() function.
    /*
     else 
     {
     Disable timer function.
     }
     */
}

/*********************************************************************
 * Function:        uint16_t  get_display_value(void)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        Use this function to get value that is shown on display.
 *
 * Note:            None
 ********************************************************************/
uint16_t
get_display_value(void) {

    return (g_yekan.value + ((uint16_t) g_dahegan.value * g_dahegan.position) +
            ((uint16_t) g_sadegan.value * g_sadegan.position));
}

/*********************************************************************
 * Function:        void set_display_value(uint16_t value)
 *
 * PreCondition:    None
 *
 * Input:           None
 *
 * Output:          None
 *
 * Side Effects:    None
 *
 * Overview:        To change display value use this function.
 *
 * Note:            None
 ********************************************************************/
void
set_display_value(uint16_t value) {

    uint16_t buffer = value;

    if (value < 999) {

        g_sadegan.value = buffer / g_sadegan.position;
        buffer %= g_sadegan.position;

        g_dahegan.value = buffer / g_dahegan.position;

        g_yekan.value = buffer % g_dahegan.position;

        g_sadegan.seven_segment_maping = g_7seg_table[g_sadegan.value];
        g_dahegan.seven_segment_maping = g_7seg_table[g_dahegan.value];
        g_yekan.seven_segment_maping = g_7seg_table[g_yekan.value];
    }
}

void TX_Command(uint8_t txData) {

    if (EUSART_is_tx_ready()) {
        EUSART_Write(txData);
    }

}

uint8_t RX_Command(void) {

    uint8_t buffer;

    if (EUSART_is_rx_ready()) {

        buffer = EUSART_Read();
        return buffer;
    }

}

void tx_7seg_reach_zero(void) {

    uint16_t buffer;
    buffer = get_display_value();

    if (0 == buffer) {

        TX_Command(); // Send 7-seg reached 0

        if (EUSART_is_tx_done()) {
            TX_Command(); // Send buzz command
        }

    }


}
